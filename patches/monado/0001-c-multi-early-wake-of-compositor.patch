From 6df06ef6468d56450de452d708e678f77b67349f Mon Sep 17 00:00:00 2001
From: Patrick Nicolas <patricknicolas@laposte.net>
Date: Tue, 22 Oct 2024 15:23:19 +0200
Subject: [PATCH 1/8] c/multi: early wake of compositor

---
 src/xrt/compositor/multi/comp_multi_compositor.c | 15 +++++++++++++++
 src/xrt/compositor/multi/comp_multi_system.c     | 11 ++++++++++-
 2 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/src/xrt/compositor/multi/comp_multi_compositor.c b/src/xrt/compositor/multi/comp_multi_compositor.c
index 2895ccb0f..1e9d5b147 100644
--- a/src/xrt/compositor/multi/comp_multi_compositor.c
+++ b/src/xrt/compositor/multi/comp_multi_compositor.c
@@ -26,6 +26,7 @@
 #include <math.h>
 #include <stdio.h>
 #include <assert.h>
+#include <signal.h>
 #include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
@@ -231,7 +232,21 @@ wait_for_scheduled_free(struct multi_compositor *mc)
 	os_mutex_lock(&mc->slot_lock);
 	slot_move_and_clear_locked(mc, &mc->scheduled, &mc->progress);
 	os_mutex_unlock(&mc->slot_lock);
+
+	bool done = true;
+	for (int k = 0; k < MULTI_MAX_CLIENTS && done; ++k) {
+		struct multi_compositor *m = mc->msc->clients[k];
+		if (m == NULL || !m->state.session_active)
+			continue;
+		os_mutex_lock(&m->slot_lock);
+		if (!time_is_within_half_ms(m->scheduled.data.display_time_ns, m->slot_next_frame_display))
+			done = false;
+		os_mutex_unlock(&m->slot_lock);
+	}
 	os_mutex_unlock(&mc->msc->list_and_timing_lock);
+
+	if (done)
+		pthread_kill(mc->msc->oth.thread, SIGUSR1);
 }
 
 static void *
diff --git a/src/xrt/compositor/multi/comp_multi_system.c b/src/xrt/compositor/multi/comp_multi_system.c
index b06b03a58..cf58fd0da 100644
--- a/src/xrt/compositor/multi/comp_multi_system.c
+++ b/src/xrt/compositor/multi/comp_multi_system.c
@@ -23,6 +23,8 @@
 #include "util/u_trace_marker.h"
 #include "util/u_distortion_mesh.h"
 
+#include "math/m_api.h"
+
 #ifdef XRT_OS_LINUX
 #include "util/u_linux.h"
 #endif
@@ -33,6 +35,7 @@
 #include <math.h>
 #include <stdio.h>
 #include <assert.h>
+#include <signal.h>
 #include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
@@ -528,7 +531,7 @@ multi_main_loop(struct multi_system_compositor *msc)
 		wait_frame(&sleeper, xc, frame_id, wake_up_time_ns);
 
 		int64_t now_ns = os_monotonic_get_ns();
-		int64_t diff_ns = predicted_display_time_ns - now_ns;
+		int64_t diff_ns = predicted_display_time_ns - MAX(wake_up_time_ns, now_ns);
 
 		// Now we know the diff, broadcast to pacers.
 		broadcast_timings_to_pacers(msc, predicted_display_time_ns, predicted_display_period_ns, diff_ns);
@@ -564,9 +567,15 @@ multi_main_loop(struct multi_system_compositor *msc)
 	return 0;
 }
 
+static void
+sig_handler(int signo)
+{}
+
 static void *
 thread_func(void *ptr)
 {
+	struct sigaction act = {.sa_handler = &sig_handler};
+	sigaction(SIGUSR1, &act, NULL);
 	return (void *)(intptr_t)multi_main_loop((struct multi_system_compositor *)ptr);
 }
 
-- 
2.47.0

