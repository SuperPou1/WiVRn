From 84c817617096e3df18fe92618e4796a832c3dc91 Mon Sep 17 00:00:00 2001
From: SuperPou <superpou1filip@gmail.com>
Date: Thu, 31 Oct 2024 12:57:04 +0100
Subject: [PATCH 1/1] add kinect support

---
 CMakeLists.txt                                |   5 +
 cmake/FindNiTE2.cmake                         |  45 ++
 cmake/FindOpenNI2.cmake                       |  46 ++
 src/xrt/compositor/client/comp_d3d_common.cpp |   8 +
 src/xrt/drivers/CMakeLists.txt                |   8 +
 src/xrt/drivers/kinect/kinect_device.cpp      | 494 ++++++++++++++++++
 src/xrt/drivers/kinect/kinect_device.h        |  38 ++
 src/xrt/targets/common/CMakeLists.txt         |   6 +
 .../common/target_builder_lighthouse.c        |  16 +
 .../targets/common/target_builder_qwerty.c    |  19 +
 .../targets/common/target_builder_steamvr.c   |  16 +
 11 files changed, 701 insertions(+)
 create mode 100644 cmake/FindNiTE2.cmake
 create mode 100644 cmake/FindOpenNI2.cmake
 create mode 100644 src/xrt/drivers/kinect/kinect_device.cpp
 create mode 100644 src/xrt/drivers/kinect/kinect_device.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 74d0bd7f9..29a1498b4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -112,6 +112,8 @@ find_package(cJSON MODULE)
 find_package(LeapV2 MODULE)
 find_package(LeapSDK 5 CONFIG)
 find_package(ONNXRuntime MODULE)
+find_package(OpenNI2 MODULE)
+find_package(NiTE2 MODULE)
 if(NOT WIN32)
 	find_package(EGL MODULE)
 	find_package(Percetto MODULE)
@@ -313,6 +315,7 @@ option_with_deps(XRT_BUILD_DRIVER_TWRAP "Enable Tracking Wrapper drivers" ON) #
 option_with_deps(XRT_BUILD_DRIVER_HDK "Enable HDK driver" DEPENDS XRT_HAVE_INTERNAL_HID)
 option_with_deps(XRT_BUILD_DRIVER_HYDRA "Enable Hydra driver" DEPENDS XRT_HAVE_INTERNAL_HID)
 option_with_deps(XRT_BUILD_DRIVER_ILLIXR "Enable ILLIXR driver" DEPENDS ILLIXR_PATH)
+option_with_deps(XRT_BUILD_DRIVER_KINECT "Enable Kinect driver" DEPENDS NiTE2_FOUND OpenNI2_FOUND XRT_HAVE_LINUX)
 option(XRT_BUILD_DRIVER_NS "Enable North Star driver" ON)
 option_with_deps(XRT_BUILD_DRIVER_OHMD "Enable OpenHMD driver" DEPENDS OPENHMD_FOUND)
 option_with_deps(XRT_BUILD_DRIVER_OPENGLOVES "Enable OpenGloves driver" DEPENDS XRT_HAVE_LIBUDEV XRT_HAVE_BLUETOOTH)
@@ -429,6 +432,7 @@ list(
 	"TWRAP"
 	"XREAL_AIR"
 	"STEAMVR_LIGHTHOUSE"
+	"KINECT"
 	)
 
 # Package name needs to be known by the native code itself.
@@ -631,6 +635,7 @@ message(STATUS "#    DRIVER_HANDTRACKING:         ${XRT_BUILD_DRIVER_HANDTRACKIN
 message(STATUS "#    DRIVER_HDK:                  ${XRT_BUILD_DRIVER_HDK}")
 message(STATUS "#    DRIVER_HYDRA:                ${XRT_BUILD_DRIVER_HYDRA}")
 message(STATUS "#    DRIVER_ILLIXR:               ${XRT_BUILD_DRIVER_ILLIXR}")
+message(STATUS "#    DRIVER_KINECT:               ${XRT_BUILD_DRIVER_KINECT}")
 message(STATUS "#    DRIVER_NS:                   ${XRT_BUILD_DRIVER_NS}")
 message(STATUS "#    DRIVER_OHMD:                 ${XRT_BUILD_DRIVER_OHMD}")
 message(STATUS "#    DRIVER_OPENGLOVES:           ${XRT_BUILD_DRIVER_OPENGLOVES}")
diff --git a/cmake/FindNiTE2.cmake b/cmake/FindNiTE2.cmake
new file mode 100644
index 000000000..80c479bbc
--- /dev/null
+++ b/cmake/FindNiTE2.cmake
@@ -0,0 +1,45 @@
+# Copyright 2019-2021, Collabora, Ltd.
+#
+# SPDX-License-Identifier: BSL-1.0
+#
+# Distributed under the Boost Software License, Version 1.0.
+# (See accompanying file LICENSE_1_0.txt or copy at
+# http://www.boost.org/LICENSE_1_0.txt)
+#
+# Original Author:
+# 2021 Moses Turner <moses@collabora.com>
+
+
+set(NiTE2_ROOT_DIR
+    "${NiTE2_ROOT_DIR}"
+    CACHE PATH "Root to search for NiTE2")
+
+find_path(
+    NiTE2_INCLUDE_DIR
+    NAMES NiTE.h
+    PATHS ${NiTE2_ROOT_DIR}
+    PATH_SUFFIXES include/nite)
+
+find_library(
+    NiTE2_LIBRARY
+    NAMES NiTE2
+    PATHS ${NiTE2_ROOT_DIR}
+    PATH_SUFFIXES lib lib/x64)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(NiTE2 REQUIRED_VARS NiTE2_INCLUDE_DIR
+                                                       NiTE2_LIBRARY)
+if(NiTE2_FOUND)
+    set(NiTE2_INCLUDE_DIRS "${NiTE2_INCLUDE_DIR}")
+    set(NiTE2_LIBRARIES "${NiTE2_LIBRARY}")
+    if(NOT TARGET NiTE2::NiTE2)
+        add_library(NiTE2::NiTE2 UNKNOWN IMPORTED)
+    endif()
+    set_target_properties(
+        NiTE2::NiTE2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
+                                  "${NiTE2_INCLUDE_DIR}")
+    set_target_properties(NiTE2::NiTE2 PROPERTIES IMPORTED_LOCATION
+                                                    "${NiTE2_LIBRARY}")
+    mark_as_advanced(NiTE2_INCLUDE_DIR NiTE2_LIBRARY)
+endif()
+mark_as_advanced(NiTE2_ROOT_DIR)
diff --git a/cmake/FindOpenNI2.cmake b/cmake/FindOpenNI2.cmake
new file mode 100644
index 000000000..6149d6e57
--- /dev/null
+++ b/cmake/FindOpenNI2.cmake
@@ -0,0 +1,46 @@
+# Copyright 2019-2021, Collabora, Ltd.
+#
+# SPDX-License-Identifier: BSL-1.0
+#
+# Distributed under the Boost Software License, Version 1.0.
+# (See accompanying file LICENSE_1_0.txt or copy at
+# http://www.boost.org/LICENSE_1_0.txt)
+#
+# Original Author:
+# 2021 Moses Turner <moses@collabora.com>
+
+
+set(OpenNI2_ROOT_DIR
+    "${OpenNI2_ROOT_DIR}"
+    CACHE PATH "Root to search for OpenNI2")
+
+find_path(
+    OpenNI2_INCLUDE_DIR
+    NAMES openni2/OpenNI.h
+    PATHS ${OpenNI2_ROOT_DIR}
+    PATH_SUFFIXES include)
+
+find_library(
+    OpenNI2_LIBRARY
+    NAMES libOpenNI2.so
+    PATHS ${OpenNI2_ROOT_DIR}
+    PATH_SUFFIXES lib lib/x64)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(OpenNI2 REQUIRED_VARS OpenNI2_INCLUDE_DIR OpenNI2_LIBRARY)
+
+if(OpenNI2_FOUND)
+    set(OpenNI2_INCLUDE_DIRS "${OpenNI2_INCLUDE_DIR}/openni2")
+    set(OpenNI2_LIBRARIES "${OpenNI2_LIBRARY}")
+    if(NOT TARGET OpenNI2::OpenNI2)
+        add_library(OpenNI2::OpenNI2 UNKNOWN IMPORTED)
+    endif()
+    set_target_properties(
+        OpenNI2::OpenNI2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
+                                  "${OpenNI2_INCLUDE_DIR}/openni2")
+    message(STATUS "Found OpenNI2: ${OpenNI2_LIBRARY}")
+    set_target_properties(OpenNI2::OpenNI2 PROPERTIES IMPORTED_LOCATION
+                                                    "${OpenNI2_LIBRARY}")
+    mark_as_advanced(OpenNI2_INCLUDE_DIR OpenNI2_LIBRARY)
+endif()
+mark_as_advanced(OpenNI2_ROOT_DIR)
diff --git a/src/xrt/compositor/client/comp_d3d_common.cpp b/src/xrt/compositor/client/comp_d3d_common.cpp
index 2227af29f..b82fb904b 100644
--- a/src/xrt/compositor/client/comp_d3d_common.cpp
+++ b/src/xrt/compositor/client/comp_d3d_common.cpp
@@ -27,6 +27,14 @@
 
 namespace xrt::compositor::client {
 
+// xrt_result_t
+// importFromHandleDuplicates(xrt_compositor_native &xcn,
+//                            std::vector<wil::unique_handle> const &handles,
+//                            const xrt_swapchain_create_info &vkinfo,
+//                            bool use_dedicated_allocation,
+//                            unique_swapchain_ref &out_xsc)
+
+
 static inline DWORD
 convertTimeoutToWindowsMilliseconds(uint64_t timeout_ns)
 {
diff --git a/src/xrt/drivers/CMakeLists.txt b/src/xrt/drivers/CMakeLists.txt
index 0d422f16e..6c85acfd8 100644
--- a/src/xrt/drivers/CMakeLists.txt
+++ b/src/xrt/drivers/CMakeLists.txt
@@ -47,6 +47,14 @@ if(XRT_BUILD_DRIVER_DEPTHAI)
 	list(APPEND ENABLED_DRIVERS depthai)
 endif()
 
+if(XRT_BUILD_DRIVER_KINECT)
+	add_library(drv_kinect STATIC kinect/kinect_device.h kinect/kinect_device.cpp)
+	target_link_libraries(drv_kinect PRIVATE xrt-interfaces aux_util aux_os aux_os_ble OpenNI2::OpenNI2 NiTE2::NiTE2)
+	target_include_directories(drv_kinect PRIVATE ${OpenNI2_INCLUDE_DIRS})
+	list(APPEND ENABLED_DRIVERS kinect)
+endif()
+
+
 if(XRT_BUILD_DRIVER_SIMULATED)
 	add_library(
 		drv_simulated STATIC simulated/simulated_controller.c simulated/simulated_hmd.c
diff --git a/src/xrt/drivers/kinect/kinect_device.cpp b/src/xrt/drivers/kinect/kinect_device.cpp
new file mode 100644
index 000000000..b2426c117
--- /dev/null
+++ b/src/xrt/drivers/kinect/kinect_device.cpp
@@ -0,0 +1,494 @@
+// Copyright 2020-2024, Collabora, Ltd.
+// SPDX-License-Identifier: BSL-1.0
+/*!
+ * @file
+ * @brief  Kinect Full Body Tracking
+ *
+ *
+ * Based largely on simulated_hmd.c
+ *
+ * @author Pranay Sanghai
+ * @ingroup drv_kinect
+ */
+
+#include "kinect_device.h"
+
+#include "math/m_filter_one_euro.h"
+#include "math/m_vec3.h"
+#include "os/os_time.h"
+#include "xrt/xrt_compiler.h"
+#include "xrt/xrt_defines.h"
+#include "xrt/xrt_device.h"
+
+#include "math/m_relation_history.h"
+#include "math/m_api.h"
+#include "math/m_mathinclude.h" // IWYU pragma: keep
+
+#include "util/u_debug.h"
+#include "util/u_device.h"
+#include "util/u_distortion_mesh.h"
+#include "util/u_logging.h"
+#include "util/u_misc.h"
+#include "util/u_time.h"
+#include "util/u_var.h"
+#include "util/u_visibility_mask.h"
+#include "xrt/xrt_results.h"
+
+#include "nite/NiTE.h"
+
+#include <NiteCEnums.h>
+#include <NiteEnums.h>
+#include <OniEnums.h>
+#include <OpenNI.h>
+#include <cmath>
+#include <cstdint>
+#include <cstdlib>
+#include <cstring>
+#include <filesystem>
+#include <stdio.h>
+#include <dlfcn.h>
+#include <thread>
+#include <time.h>
+#include <unistd.h>
+
+/*
+ *
+ * Structs and defines.
+ *
+ */
+
+struct Joint
+{
+	struct xrt_device base;
+
+	struct xrt_pose pose;
+
+	int role;
+
+	struct m_relation_history *history;
+
+	struct kinect *parent;
+
+	uint64_t timestamp;
+
+	m_filter_euro_vec3 pos_filter;
+};
+
+
+/*!
+ * A kinect HMD device.
+ *
+ * @implements xrt_device
+ */
+struct kinect
+{
+	struct xrt_device base;
+
+	struct xrt_pose pose;
+
+	uint64_t timestamp;
+
+	enum u_logging_level log_level;
+
+	// has built-in mutex so thread safe
+	struct m_relation_history *relation_hist;
+
+	struct xrt_device *hmd;
+
+	openni::Device *oni_device;
+
+	nite::UserTracker *user_tracker;
+
+	struct Joint *joints[NUMBER_OF_TRACKERS];
+
+	// Tracker position updating thread
+	std::thread tracking_thread;
+
+	// Tracking point modification mutex
+	std::mutex tracking_mutex;
+};
+
+/// Casting helper function
+static inline struct kinect *
+kinect(struct xrt_device *xdev)
+{
+	return (struct kinect *)xdev;
+}
+
+DEBUG_GET_ONCE_LOG_OPTION(kinect_log, "KINECT_LOG", U_LOGGING_WARN)
+
+#define HMD_TRACE(hmd, ...) U_LOG_XDEV_IFL_T(&hmd->base, hmd->log_level, __VA_ARGS__)
+#define HMD_DEBUG(hmd, ...) U_LOG_XDEV_IFL_D(&hmd->base, hmd->log_level, __VA_ARGS__)
+#define HMD_INFO(hmd, ...) U_LOG_XDEV_IFL_I(&hmd->base, hmd->log_level, __VA_ARGS__)
+#define HMD_ERROR(hmd, ...) U_LOG_XDEV_IFL_E(&hmd->base, hmd->log_level, __VA_ARGS__)
+
+static void
+kinect_destroy(struct xrt_device *xdev)
+{
+	struct kinect *dev = ((struct kinect *)xdev);
+
+	dev->user_tracker->destroy();
+
+	nite::NiTE::shutdown();
+	openni::OpenNI::shutdown();
+
+	for (uint32_t i = 0; i < NUMBER_OF_TRACKERS; i++) {
+		if (dev->joints[i] != NULL) {
+			u_device_free(&dev->joints[i]->base);
+		}
+	}
+
+	// Remove the variable tracking.
+	u_var_remove_root(dev);
+
+	m_relation_history_destroy(&dev->relation_hist);
+
+	u_device_free(&dev->base);
+}
+
+static xrt_result_t
+kinect_get_tracked_pose(struct xrt_device *xdev,
+                        enum xrt_input_name name,
+                        int64_t at_timestamp_ns,
+                        struct xrt_space_relation *out_relation)
+{
+	struct kinect *dev = (struct kinect *)xdev;
+	struct xrt_device *hmd = dev->hmd;
+
+	if (hmd != NULL) {
+		xrt_device_get_tracked_pose(hmd, name, at_timestamp_ns, out_relation);
+		return XRT_SUCCESS;
+	} else {
+		*out_relation = XRT_SPACE_RELATION_ZERO;
+	}
+}
+
+static xrt_result_t
+kinect_update_inputs(struct xrt_device *xdev)
+{
+	struct kinect *const dev = (struct kinect *)xdev;
+
+	for (uint32_t i = 0; i < dev->base.input_count; i++) {
+		dev->base.inputs[i].timestamp = dev->timestamp;
+	}
+
+	for (uint32_t i = 0; i < NUMBER_OF_TRACKERS; i++) {
+		if (dev->joints[i] != NULL) {
+			dev->tracking_mutex.lock();
+			dev->joints[i]->base.inputs[0].timestamp = dev->timestamp;
+			dev->tracking_mutex.unlock();
+		}
+	}
+
+	struct xrt_space_relation head = XRT_SPACE_RELATION_ZERO;
+	kinect_get_tracked_pose(xdev, XRT_INPUT_GENERIC_HEAD_POSE, os_monotonic_get_ns(), &head);
+
+	return XRT_SUCCESS;
+}
+
+
+// static xrt_result_t
+// kinect_get_body_joints(struct xrt_device *const xdev,
+// 						const enum xrt_input_name body_tracking_type,
+// 						const int64_t desired_timestamp_ns,
+// 						struct xrt_body_joint_set *const out_value)
+// {
+// 	static const uint32_t joint_map[NUMBER_OF_TRACKERS] = {
+// 		[NITE_JOINT_NECK] = XRT_BODY_JOINT_NECK_FB,
+// 		[NITE_JOINT_TORSO] = XRT_BODY_JOINT_SPINE_MIDDLE_FB,
+// 		[NITE_JOINT_LEFT_SHOULDER] = XRT_BODY_JOINT_LEFT_SHOULDER_FB,
+// 		[NITE_JOINT_RIGHT_SHOULDER] = XRT_BODY_JOINT_RIGHT_SHOULDER_FB,
+// 		[NITE_JOINT_LEFT_ELBOW] = XRT_BODY_JOINT_LEFT_ARM_UPPER_FB,
+// 		[NITE_JOINT_RIGHT_ELBOW] = XRT_BODY_JOINT_RIGHT_ARM_UPPER_FB,
+// 		[NITE_JOINT_LEFT_HAND] = XRT_BODY_JOINT_LEFT_HAND_WRIST_FB,
+// 		[NITE_JOINT_RIGHT_HAND] = XRT_BODY_JOINT_RIGHT_HAND_WRIST_FB,
+// 		//[NITE_JOINT_LEFT_HIP] = XRT_BODY_JOINT_
+// 		//[NITE_JOINT_RIGHT_HIP] = XRT_BODY_JOINT_
+// 		// [NITE_JOINT_LEFT_KNEE] = XRT_BODY_JOINT_LEFT_
+// 		// [NITE_JOINT_RIGHT_KNEE] = XRT_BODY_JOINT_RIGHT_
+// #ifdef XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+// 		[NITE_JOINT_LEFT_FOOT] = XRT_FULL_BODY_JOINT_LEFT_FOOT_TRANSVERSE_META
+// 		[NITE_JOINT_RIGHT_FOOT] = XRT_FULL_BODY_JOINT_RIGHT_FOOT_TRANSVERSE_META
+// 		[NITE_JOINT_LEFT_KNEE] = XRT_FULL_BODY_JOINT_LEFT_LOWER_LEG_META
+// 		[NITE_JOINT_RIGHT_KNEE] = XRT_FULL_BODY_JOINT_RIGHT_LOWER_LEG_META
+// #endif
+// 	};
+
+// 	struct xrt_body_joint_location_fb *joints;
+// 	uint32_t num_joints;
+
+// 	switch (body_tracking_type) {
+// 		case XRT_INPUT_FB_BODY_TRACKING: {
+// 			joints = out_value->body_joint_set_fb.joint_locations;
+// 			num_joints = ARRAY_SIZE(out_value->body_joint_set_fb.joint_locations);
+// 			break;
+// 		}
+// #ifdef XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+// 		case XRT_INPUT_META_FULL_BODY_TRACKING: {
+// 			joints = out_value->full_body_joint_set_meta.joint_locations;
+// 			num_joints = ARRAY_SIZE(out_value->full_body_joint_set_meta.joint_locations);
+// 			break;
+// 		}
+// #endif
+// 		default: return XRT_ERROR_NOT_IMPLEMENTED;
+// 	}
+
+// 	struct kinect *const dev = (struct kinect *)xdev;
+
+// 	for (uint32_t i = 0; i < num_joints; i++) {
+
+// 	}
+
+
+// }
+
+static xrt_result_t
+kinect_joint_get_tracked_pose(struct xrt_device *xdev,
+                              enum xrt_input_name name,
+                              int64_t at_timestamp_ns,
+                              struct xrt_space_relation *out_relation)
+{
+	struct Joint *dev = ((struct Joint *)xdev);
+
+	dev->parent->tracking_mutex.lock();
+	m_relation_history_get(dev->history, at_timestamp_ns, out_relation);
+	dev->parent->tracking_mutex.unlock();
+}
+
+static void
+kinect_joint_destroy(struct xrt_device *xdev)
+{
+	struct Joint *dev = ((struct Joint *)xdev);
+
+	m_relation_history_destroy(&dev->history);
+
+	u_device_free(&dev->base);
+}
+
+void
+kinect_tracking(struct kinect *dev)
+{
+	nite::UserTrackerFrameRef *frame = new nite::UserTrackerFrameRef();
+	while (true) {
+		dev->user_tracker->readFrame(frame);
+
+		if (frame != NULL) {
+			if (frame->getUsers().getSize() > 0) {
+
+				nite::UserData user = frame->getUsers()[0];
+
+				nite::Skeleton skeleton = user.getSkeleton();
+
+				if (skeleton.getState() == nite::SKELETON_TRACKED) {
+					// Get tare position by taking the neck position and putting it 0.02m below the
+					// head.
+					xrt_space_relation head;
+					dev->hmd->get_tracked_pose(dev->hmd, XRT_INPUT_GENERIC_HEAD_POSE,
+					                           os_monotonic_get_ns(), &head);
+					xrt_vec3 head_position = xrt_vec3(
+					    skeleton.getJoint(nite::JointType(NITE_JOINT_HEAD)).getPosition().x /
+					        -1000.0f,
+					    skeleton.getJoint(nite::JointType(NITE_JOINT_HEAD)).getPosition().y /
+					        750.0f,
+					    skeleton.getJoint(nite::JointType(NITE_JOINT_HEAD)).getPosition().z /
+					        -1000.0f);
+
+					xrt_vec3 tare_offset =
+					    xrt_vec3(head.pose.position.x - head_position.x,  // Left/right
+					             head.pose.position.y - head_position.y,  // Y is up
+					             head.pose.position.z - head_position.z); // Forwards/backward
+					// xrt_vec3 tare_offset = xrt_vec3(neck_position.x - head.pose.position.x, //
+					// Left/right 								neck_position.y - head.pose.position.y, // Y is up 								neck_position.z
+					// - head.pose.position.z); // Forwards/backward
+
+
+
+					for (uint32_t i = 0; i < NUMBER_OF_TRACKERS; i++) {
+						xrt_space_relation rel = {};
+
+						uint64_t timestamp = os_monotonic_get_ns();
+
+						int idx = TRACKER_ROLES[i];
+						xrt_pose new_pose;
+						auto this_joint = skeleton.getJoint(nite::JointType(idx));
+						auto this_joint_position = this_joint.getPosition();
+						new_pose.position =
+						    m_vec3_add(xrt_vec3(this_joint_position.x / -1000.0f,
+						                        this_joint_position.y / 750.0f,
+						                        this_joint_position.z / -1000.0f),
+						               tare_offset);
+
+						// new_pose.orientation =
+						// xrt_quat(skeleton.getJoint(nite::JointType(TRACKER_ROLES[i])).getOrientation().w,
+						// 							skeleton.getJoint(nite::JointType(TRACKER_ROLES[i])).getOrientation().x,
+						// 							skeleton.getJoint(nite::JointType(TRACKER_ROLES[i])).getOrientation().y,
+						// 							skeleton.getJoint(nite::JointType(TRACKER_ROLES[i])).getOrientation().z);
+						new_pose.orientation = XRT_QUAT_IDENTITY;
+
+						// new_pose.orientation =
+						// xrt_quat(user.skeleton.joints[idx].orientation.x,
+						// user.skeleton.joints[idx].orientation.y,
+						// user.skeleton.joints[idx].orientation.z,
+						// user.skeleton.joints[idx].orientation.w);
+
+						xrt_vec3 linear_velocity = {
+						    fabsf((dev->joints[i]->pose.position.x - new_pose.position.x) /
+						          (dev->joints[i]->timestamp - timestamp)),
+						    fabsf((dev->joints[i]->pose.position.y - new_pose.position.y) /
+						          (dev->joints[i]->timestamp - timestamp)),
+						    fabsf((dev->joints[i]->pose.position.z - new_pose.position.z) /
+						          (dev->joints[i]->timestamp - timestamp))};
+
+						// xrt_vec3 angular_velocity = XRT_VEC3_ZERO;
+
+						// math_quat_rotate_derivative(&new_pose.orientation, &angular_velocity,
+						// &rel.angular_velocity);
+
+						m_filter_euro_vec3_run(&dev->joints[i]->pos_filter, timestamp,
+						                       &new_pose.position, &new_pose.position);
+
+						rel.linear_velocity = linear_velocity;
+						rel.pose = new_pose;
+
+						if (this_joint.getPositionConfidence() >
+						    POSITION_CONFIDENCE_THRESHOLD) {
+							rel.relation_flags =
+							    (xrt_space_relation_flags)(XRT_SPACE_RELATION_POSITION_VALID_BIT |
+							                               XRT_SPACE_RELATION_POSITION_TRACKED_BIT |
+							                               XRT_SPACE_RELATION_LINEAR_VELOCITY_VALID_BIT);
+
+							dev->tracking_mutex.lock();
+							dev->joints[i]->pose = new_pose;
+							dev->joints[i]->timestamp = timestamp;
+
+							m_relation_history_push(dev->joints[i]->history, &rel,
+							                        timestamp);
+							dev->tracking_mutex.unlock();
+						}
+
+
+						// U_LOG_E("Joint %i: %f %f %f\n", i, new_pose.position.x,
+						// new_pose.position.y, new_pose.position.z);
+					}
+				} else {
+					if (user.isNew()) {
+						// niteStartSkeletonTracking(*dev->user_tracker, user.id);
+						dev->user_tracker->startSkeletonTracking(user.getId());
+					}
+				}
+			}
+		}
+	}
+}
+
+struct xrt_device *
+kinect_device_create(struct xrt_device *const hmd)
+{
+	struct xrt_device *out = NULL;
+	const uint32_t result = kinect_device_create_xdevs(hmd, &out, 1);
+	return result ? out : NULL;
+}
+
+uint32_t
+kinect_device_create_xdevs(struct xrt_device *const hmd, struct xrt_device **const out_xdevs, uint32_t out_xdevs_cap)
+{
+	if (out_xdevs_cap < 1) {
+		return 0;
+	}
+
+	if (out_xdevs_cap - 1 > NUMBER_OF_TRACKERS) {
+		out_xdevs_cap = NUMBER_OF_TRACKERS + 1;
+	}
+
+	// This indicates you won't be using Monado's built-in tracking algorithms.
+	enum u_device_alloc_flags flags = (enum u_device_alloc_flags)(U_DEVICE_ALLOC_TRACKING_NONE);
+
+#ifdef XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+	struct kinect *kt = U_DEVICE_ALLOCATE(struct kinect, flags, 2, 0);
+#else
+	struct kinect *kt = U_DEVICE_ALLOCATE(struct kinect, flags, 1, 0);
+#endif
+
+	kt->base.name = XRT_DEVICE_FB_BODY_TRACKING;
+	kt->base.device_type = XRT_DEVICE_TYPE_BODY_TRACKER;
+	strncpy(kt->base.str, "Kinect Full Body Tracking", sizeof(kt->base.str) - 1);
+	kt->base.body_tracking_supported = true;
+	kt->base.get_tracked_pose = kinect_get_tracked_pose;
+	// kt->base.get_body_skeleton = kinect_get_body_skeleton;
+	// kt->base.get_body_joints = kinect_get_body_joints;
+	kt->base.update_inputs = kinect_update_inputs;
+	kt->base.destroy = kinect_destroy;
+
+	kt->base.inputs[0].name = XRT_INPUT_FB_BODY_TRACKING;
+#ifdef XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+	kt->base.inputs[1].name = XRT_INPUT_FB_BODY_TRACKING_META;
+#endif
+
+	kt->hmd = hmd;
+
+	openni::Status init_result = openni::OpenNI::initialize();
+
+	if (init_result) {
+		U_LOG_E("oniInitialize Fail! Code: %d", init_result);
+		return 0;
+	}
+
+	openni::OpenNI::initialize();
+
+	kt->oni_device = new openni::Device();
+
+	openni::Status open_result = kt->oni_device->open(openni::ANY_DEVICE);
+
+	if (open_result) {
+		U_LOG_E("oniDeviceOpen Fail! Code: %d", open_result);
+		return 0;
+	}
+
+	std::filesystem::current_path(std::filesystem::path(std::getenv("NITE2_PATH")).parent_path());
+
+	nite::NiTE::initialize();
+
+	kt->user_tracker = new nite::UserTracker();
+	nite::Status init_user_tracker_result = kt->user_tracker->create(kt->oni_device);
+
+	if (init_user_tracker_result) {
+		U_LOG_E("niteInitializeUserTracker Fail! Code: %d", init_user_tracker_result);
+		return 0;
+	}
+
+	strncpy(kt->base.serial, kt->oni_device->getDeviceInfo().getUri(), sizeof(kt->base.serial) - 1);
+
+	kt->timestamp = os_monotonic_get_ns();
+
+	kt->tracking_thread = std::thread(kinect_tracking, kt);
+
+	for (int i = 0; i < NUMBER_OF_TRACKERS; i++) {
+		struct Joint *joint =
+		    U_DEVICE_ALLOCATE(struct Joint, (enum u_device_alloc_flags)(U_DEVICE_ALLOC_TRACKING_NONE), 1, 0);
+		joint->role = TRACKER_ROLES[i];
+		joint->parent = kt;
+		joint->timestamp = os_monotonic_get_ns();
+		joint->base.name = XRT_DEVICE_VIVE_TRACKER;
+		joint->base.device_type = XRT_DEVICE_TYPE_GENERIC_TRACKER;
+		// "Tracker" needs to be in an xdev's name for OpenComposite to pick it up
+		snprintf(joint->base.str, sizeof(joint->base.str) - 1, "Kinect Tracker %d", TRACKER_ROLES[i]);
+		snprintf(joint->base.serial, sizeof(joint->base.serial) - 1, "%d", TRACKER_ROLES[i]);
+		joint->base.tracking_origin = hmd->tracking_origin;
+		joint->base.orientation_tracking_supported = true;
+		joint->base.position_tracking_supported = true;
+		joint->base.update_inputs = u_device_noop_update_inputs;
+		joint->base.get_tracked_pose = kinect_joint_get_tracked_pose;
+		joint->base.destroy = kinect_joint_destroy;
+		joint->base.inputs[0].name = XRT_INPUT_GENERIC_TRACKER_POSE;
+		m_relation_history_create(&joint->history);
+		m_filter_euro_vec3_init(&joint->pos_filter, ONE_EURO_FC_MIN, ONE_EURO_FC_MIN_D, ONE_EURO_BETA);
+		kt->joints[i] = joint;
+	}
+
+	uint32_t tracker_count = 0;
+	out_xdevs[tracker_count++] = &kt->base;
+	for (int i = 0; i < NUMBER_OF_TRACKERS; i++) {
+		out_xdevs[tracker_count++] = &kt->joints[i]->base;
+	}
+
+	return tracker_count;}
diff --git a/src/xrt/drivers/kinect/kinect_device.h b/src/xrt/drivers/kinect/kinect_device.h
new file mode 100644
index 000000000..55414e347
--- /dev/null
+++ b/src/xrt/drivers/kinect/kinect_device.h
@@ -0,0 +1,38 @@
+#include "xrt/xrt_tracking.h"
+#include <stdint.h>
+#include <stddef.h>
+
+struct xrt_tracking_origin;
+struct xrt_device;
+
+#define NUMBER_OF_TRACKERS 12 // See NiteEnums.h, we aren't tracking head.
+
+#define TRACKER_ROLES                                                                                                  \
+	(int[NUMBER_OF_TRACKERS])                                                                                      \
+	{                                                                                                              \
+		NITE_JOINT_NECK, NITE_JOINT_LEFT_SHOULDER, NITE_JOINT_RIGHT_SHOULDER, NITE_JOINT_LEFT_ELBOW,           \
+		    NITE_JOINT_RIGHT_ELBOW, NITE_JOINT_TORSO, NITE_JOINT_LEFT_HIP, NITE_JOINT_RIGHT_HIP,               \
+		    NITE_JOINT_LEFT_KNEE, NITE_JOINT_RIGHT_KNEE, NITE_JOINT_LEFT_FOOT, NITE_JOINT_RIGHT_FOOT           \
+	}
+
+#define POSITION_CONFIDENCE_THRESHOLD 0.5f
+
+#define ONE_EURO_BETA 0.16f
+#define ONE_EURO_FC_MIN_D 1
+#define ONE_EURO_FC_MIN M_PI
+
+// NITE_JOINT_LEFT_HAND,
+// NITE_JOINT_RIGHT_HAND,
+
+#ifdef __cplusplus
+#define EXTENRC extern "C"
+#else
+#define EXTENRC
+#endif
+
+EXTENRC uint32_t
+kinect_device_create_xdevs(struct xrt_device *const hmd, struct xrt_device **const out_xdevs, uint32_t out_xdevs_cap);
+EXTENRC struct xrt_device *
+kinect_device_create(struct xrt_device *const hmd);
+
+#undef EXTENRC
diff --git a/src/xrt/targets/common/CMakeLists.txt b/src/xrt/targets/common/CMakeLists.txt
index e2b9ba79d..184a384d2 100644
--- a/src/xrt/targets/common/CMakeLists.txt
+++ b/src/xrt/targets/common/CMakeLists.txt
@@ -179,6 +179,12 @@ if(XRT_BUILD_DRIVER_ILLIXR)
 	target_link_libraries(target_lists PRIVATE drv_illixr)
 endif()
 
+
+if(XRT_BUILD_DRIVER_KINECT)
+	target_link_libraries(target_lists PRIVATE drv_kinect)
+endif()
+
+
 target_link_libraries(target_lists PRIVATE drv_multi)
 
 if(XRT_BUILD_DRIVER_QWERTY)
diff --git a/src/xrt/targets/common/target_builder_lighthouse.c b/src/xrt/targets/common/target_builder_lighthouse.c
index f58782ff6..7fe48e4ea 100644
--- a/src/xrt/targets/common/target_builder_lighthouse.c
+++ b/src/xrt/targets/common/target_builder_lighthouse.c
@@ -58,6 +58,12 @@
 #include "opengloves/opengloves_interface.h"
 #endif
 
+#if defined(XRT_BUILD_DRIVER_KINECT)
+	#include "kinect/kinect_device.h"
+	#define XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+#endif
+
+
 #if defined(XRT_BUILD_DRIVER_SURVIVE)
 #define DEFAULT_DRIVER "survive"
 #else
@@ -736,6 +742,16 @@ end_valve_index:
 		try_add_opengloves(left, right, &left_ht, &right_ht);
 	}
 
+#if defined(XRT_BUILD_DRIVER_KINECT)
+	const uint32_t count = kinect_device_create_xdevs(xsysd->static_roles.head, &xsysd->xdevs[xsysd->xdev_count], ARRAY_SIZE(xsysd->xdevs) - xsysd->xdev_count);
+
+	if (count != 0) {
+		xsysd->static_roles.body = xsysd->xdevs[xsysd->xdev_count];
+	}
+
+	xsysd->xdev_count += count;
+#endif
+
 	// Assign to role(s).
 	ubrh->head = head;
 	ubrh->left = left;
diff --git a/src/xrt/targets/common/target_builder_qwerty.c b/src/xrt/targets/common/target_builder_qwerty.c
index 2c66ad303..322fe6c0c 100644
--- a/src/xrt/targets/common/target_builder_qwerty.c
+++ b/src/xrt/targets/common/target_builder_qwerty.c
@@ -18,6 +18,14 @@
 
 #include "qwerty/qwerty_interface.h"
 
+
+#if defined(XRT_BUILD_DRIVER_KINECT)
+	#include "kinect/kinect_device.h"
+	#define XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+#endif
+
+
+
 #include <assert.h>
 
 
@@ -100,6 +108,17 @@ qwerty_open_system_impl(struct xrt_builder *xb,
 	ubrh->left = left;
 	ubrh->right = right;
 
+#if defined(XRT_BUILD_DRIVER_KINECT)
+	const uint32_t count = kinect_device_create_xdevs(xsysd->static_roles.head, &xsysd->xdevs[xsysd->xdev_count], ARRAY_SIZE(xsysd->xdevs) - xsysd->xdev_count);
+
+	if (count != 0) {
+		xsysd->static_roles.body = xsysd->xdevs[xsysd->xdev_count];
+	}
+
+	xsysd->xdev_count += count;
+#endif
+
+
 	return XRT_SUCCESS;
 }
 
diff --git a/src/xrt/targets/common/target_builder_steamvr.c b/src/xrt/targets/common/target_builder_steamvr.c
index 814656519..3914a4666 100644
--- a/src/xrt/targets/common/target_builder_steamvr.c
+++ b/src/xrt/targets/common/target_builder_steamvr.c
@@ -34,6 +34,12 @@
 #include "xrt/xrt_space.h"
 #include "util/u_space_overseer.h"
 
+#if defined(XRT_BUILD_DRIVER_KINECT)
+	#include "kinect/kinect_device.h"
+	#define XRT_FEATURE_OPENXR_BODY_TRACKING_FULL_BODY_META
+#endif
+
+
 #ifndef XRT_BUILD_DRIVER_STEAMVR_LIGHTHOUSE
 #error "This builder requires the SteamVR Lighthouse driver"
 #endif
@@ -153,6 +159,16 @@ steamvr_open_system(struct xrt_builder *xb,
 	svrb->right_ht = u_system_devices_get_ht_device_right(xsysd);
 	xsysd->static_roles.hand_tracking.right = svrb->right_ht;
 
+#if defined(XRT_BUILD_DRIVER_KINECT)
+	const uint32_t count = kinect_device_create_xdevs(xsysd->static_roles.head, &xsysd->xdevs[xsysd->xdev_count], ARRAY_SIZE(xsysd->xdevs) - xsysd->xdev_count);
+
+	if (count != 0) {
+		xsysd->static_roles.body = xsysd->xdevs[xsysd->xdev_count];
+	}
+
+	xsysd->xdev_count += count;
+#endif
+
 	/*
 	 * Space overseer.
 	 */
-- 
2.44.2

